#hanadi abdulrahem alsulami - KAU -JED -KSA 

import pandas as pd 
import numpy as np 
from sklearn.metrics import classification_report, confusion_matrix 
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV 
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from mlxtend.plotting import plot_decision_regions
import matplotlib.pyplot as plt


cancer = pd.read_csv('data.csv')
cancer.info()
cancer.head()

Y = cancer['diagnosis']
labelencoder_Y = LabelEncoder()
Y = labelencoder_Y.fit_transform(Y)

X=cancer.iloc[:,2:4]

x_train,x_test,y_train,y_test= train_test_split(X,Y, test_size=0.3,random_state=0)

from sklearn.linear_model import LogisticRegression
classifier_1 = LogisticRegression()
classifier_1.fit(x_train, y_train)

from sklearn.svm import SVC
classifier_2 = SVC(C=1.0, kernel = 'linear',degree =3,gamma=0.1)
classifier_2.fit(x_train, y_train)

Y_pred_1 = classifier_1.predict(x_test)
Y_pred_2 = classifier_2.predict(x_test)

# print prediction results 
 
print('Logistic regression \n',classification_report(y_test, Y_pred_1))
print('SVM \n',classification_report(y_test, Y_pred_2))




from sklearn.model_selection import GridSearchCV 

  
# defining parameter range 

param_grid = {'C': [0.1, 1, 10, 100, 1000],  

              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], 

              'kernel': ['linear']}  

  

grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3) 

  
# fitting the model for grid search 
grid.fit(x_train, y_train)


# print best parameter after tuning 

print(grid.best_params_) 

  
# print how our model looks after hyper-parameter tuning 

print(grid.best_estimator_) 
 



grid_predictions = grid.predict(x_test) 

  
# print classification report 
print(classification_report(y_test, grid_predictions)) 
plot_decision_regions(x_train.iloc[:,:].values, y_train,clf=classifier_1, legend=2)
plt.title('logistic regression')
plt.show()

plot_decision_regions(x_train.iloc[:,:].values, y_train,clf=classifier_2, legend=2)
plt.title('SVM')
plt.show()

